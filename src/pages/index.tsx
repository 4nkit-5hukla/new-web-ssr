import { FC } from 'react';
import type { InferGetStaticPropsType, GetServerSidePropsContext } from 'next';
import Head from 'next/head';

import { apiRequest } from 'root/utils/apiRequest';
import { homeSlugs, populate, populateDeep } from 'root/constants/config';

import styles from 'root/assets/Home.module.css';

type HomePageProps = InferGetStaticPropsType<typeof getServerSideProps>;

// Declare global namespace to extend NodeJS.Global
declare global {
  var _headerCache: { [key: string]: any };
  var _footerCache: { [key: string]: any };
  var _pageCache: { [key: string]: any };
}

// Initialize global caches if they don't exist
global._headerCache = global._headerCache || {};
global._footerCache = global._footerCache || {};
global._pageCache = global._pageCache || {};

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const { req, query } = context;
  const userAgent = req.headers['user-agent'] || '';
  const isBot = /bot|googlebot|crawler|spider|robot|crawling/i.test(userAgent);

  try {
    const { flushCache } = query;
    const doFlushCache = flushCache !== undefined;
    if (doFlushCache) {
      delete global._headerCache['main-nav'];
      delete global._footerCache['footer-top-menu'];
      delete global._pageCache['home'];
    }
    const resHeader =
      global._headerCache['main-nav'] !== undefined
        ? global._headerCache['main-nav']
        : await apiRequest(`/main-nav`, 'GET', populateDeep);
    if (global._headerCache['main-nav'] === undefined)
      global._headerCache['main-nav'] = resHeader;
    const header = resHeader.data;
    const resFooter =
      global._footerCache['footer-top-menu'] !== undefined
        ? global._footerCache['footer-top-menu']
        : await apiRequest(`/footer-top-menu`, 'GET', populateDeep);
    if (global._footerCache['footer-top-menu'] === undefined)
      global._footerCache['footer-top-menu'] = resFooter;
    const footer = resFooter.data;
    const pageResult =
      global._pageCache['home'] !== undefined
        ? global._pageCache['home']
        : await apiRequest(`/pages`, 'GET', {
            params: {
              filters: {
                $or: homeSlugs.map((slug) => ({ slug: { $containsi: slug } })),
              },
              pagination: { pageSize: 1 },
              populate,
            },
          });
    if (global._pageCache['home'] === undefined) global._pageCache['home'] = pageResult;
    const meta = pageResult.meta;
    if (meta.pagination.total > 0) {
      const [result] = pageResult.data;
      return { props: { isBot, header, footer, result } };
    } else {
      return { notFound: true };
    }
  } catch (error) {
    console.log(error);
    return {
      redirect: {
        destination: '/500',
        permanent: false,
      },
    };
  }
};

const HomePage: FC<HomePageProps> = (data) => {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.page}>
        <pre>{JSON.stringify(data, null, 2)}</pre>
      </div>
    </>
  );
};

export default HomePage;